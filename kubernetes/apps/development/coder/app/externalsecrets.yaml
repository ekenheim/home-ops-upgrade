---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: coder # Manages the 'coder-secret' Kubernetes Secret
spec:
  secretStoreRef:
    kind: ClusterSecretStore
    name: bitwarden-secrets-manager # Changed from doppler
  target:
    name: coder-secret # K8s secret for Coder application settings
    creationPolicy: Owner
    template:
      engineVersion: v2
      data:
        # OIDC - Uncomment and ensure these keys exist in your Bitwarden 'CODER' entry if needed
        # CODER_OIDC_ISSUER_URL: "{{ .CODER_OIDC_ISSUER_URL }}"
        # CODER_OIDC_EMAIL_DOMAIN: "{{ .CODER_OIDC_EMAIL_DOMAIN }}"
        # CODER_OIDC_CLIENT_ID: "{{ .CODER_OIDC_CLIENT_ID }}"
        # CODER_OIDC_CLIENT_SECRET: "{{ .CODER_OIDC_CLIENT_SECRET }}"
        # Postgres Init Super User Pass - Ensure 'INIT_POSTGRES_SUPER_PASS' key exists in your Bitwarden 'CODER' entry
        INIT_POSTGRES_SUPER_PASS: "{{ .INIT_POSTGRES_SUPER_PASS }}"
  dataFrom:
    - extract:
        key: CODER # The name of the secret entry in Bitwarden
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: coder-db # Manages the 'coder-db-secret' Kubernetes Secret
spec:
  refreshInterval: 1m
  secretStoreRef:
    name: crunchy-pgo-secrets # For Crunchy Data Postgres Operator
    kind: ClusterSecretStore
  target:
    name: coder-db-secret # K8s secret for Coder database credentials
    creationPolicy: Owner
    deletionPolicy: Retain # Keep the secret even if this ExternalSecret is deleted
    template:
      type: Opaque
      engineVersion: v2
      data:
        CODER__POSTGRES_HOST: '{{ index . "pgbouncer-host" }}'
        CODER__POSTGRES_PORT: '{{ index . "pgbouncer-port" }}'
        CODER__POSTGRES_USER: '{{ .user }}'
        CODER__POSTGRES_PASSWORD: '{{ .password }}'
        CODER__POSTGRES_MAIN_DB: '{{ .dbname }}'
        CODER_PG_CONNECTION_URL: 'postgres://{{ .user }}:{{ .password }}@{{ index . "pgbouncer-host" }}:{{ index . "pgbouncer-port" }}/{{ .dbname }}'
        # Variables for the init job, sourced from the PGO user secret
        INIT_POSTGRES_DBNAME: '{{ .dbname }}'
        INIT_POSTGRES_HOST: '{{ index . "pgbouncer-host" }}'
        INIT_POSTGRES_USER: '{{ .user }}'
        INIT_POSTGRES_PASS: '{{ .password }}'
  dataFrom:
    - extract:
        key: postgres-pguser-coder # Assumes your PGO secret for the 'coder' user is named this
