---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: gitlab-runner
spec:
  interval: 15m
  chart:
    spec:
      chart: gitlab-runner
      version: 0.76.0
      sourceRef:
        kind: HelmRepository
        name: gitlab-charts
        namespace: flux-system
      interval: 15m

  driftDetection:
    mode: enabled
  maxHistory: 3
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3

  values:
    nameOverride: gitlab-runner

    podAnnotations:
      secret.reloader.stakater.com/reload: gitlab-runner-secret, gitlab-runner-cache-secret

    revisionHistoryLimit: 1

    gitlabUrl: http://gitlab-webservice-default.development.svc.cluster.local:8080

    replicas: 2

    unregisterRunners: true

    concurrent: 6
    checkInterval: 10

    logLevel: info  # debug, info, warn, error, fatal, panic
    logFormat: json # runner, text, json

    rbac:
      create: true

    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
    service:
      enabled: true

    extraEnvFrom:
      CACHE_S3_ACCESS_KEY:
        secretKeyRef:
          name: gitlab-runner-cache-secret
          key: accesskey
      CACHE_S3_SECRET_KEY:
        secretKeyRef:
          name: gitlab-runner-cache-secret
          key: secretkey

    runners:
      secret: gitlab-runner-secret

      executor: kubernetes
      name: development-runner
      tags: "development,k8s"

      config: |
        [[runners]]
          environment = ["FF_GITLAB_REGISTRY_HELPER_IMAGE=true"]
          builds_dir = "/builds"

          [runners.feature_flags]
            FF_USE_ADVANCED_POD_SPEC_CONFIGURATION = true

          [runners.cache]
            Type = "s3"
            Shared = true
            [runners.cache.s3]
              ServerAddress = "minio-secondary.storage.svc.cluster.local:9000"
              BucketName = "gitlab-runner-cache"
              BucketLocation = "us-east-1"
              AuthenticationType = "access-key"

          [runners.kubernetes]
            namespace = "{{.Release.Namespace}}"
            image = "ubuntu:22.04"
            privileged = true
            dns_policy = "default"

            [[runners.kubernetes.pod_spec]]
              name = "ephemeral-builds"
              patch_type = "strategic"
              patch = '''
                containers:
                - name: build
                  volumeMounts:
                  - name: builds
                    mountPath: /builds
                - name: helper
                  volumeMounts:
                  - name: builds
                    mountPath: /builds
                volumes:
                - name: builds
                  emptyDir: {} # Use emptyDir for builds volume
              '''

      # -- Configuration for the Kubernetes executor
      # ref: https://docs.gitlab.com/runner/executors/kubernetes.html
      # kubernetes:
      #   # -- The default image to use for the Kubernetes executor
      #   image: ubuntu:22.04
      #   # -- Disable default annotations for the service account
      #   serviceAccountAnnotations: {}
      #   # -- Overwrite the default annotations for the pod.
      #   podAnnotations: {}
      #   # -- Overwrite the default labels for the pod.
      #   podLabels: {}
      #   # -- Run all containers with the privileged flag enabled
      #   # This is required if you want to build docker images with Kaniko
      #   privileged: true # Set to true if using dind requires it, or for Kaniko buildah etc.
      #   # -- The default DNS policy for the pod.
      #   # Set to "default" or "ClusterFirstWithHostNet" if you experience issues with DNS resolution.
      #   # Default: ClusterFirst
      #   dnsPolicy: Default # Corrected capitalization
      #   # -- Add volumes to the pod.
      #   # ref: https://kubernetes.io/docs/concepts/storage/volumes/
      #   volumes:
      #     # -- Define a volume named 'builds' using an ephemeral VolumeClaimTemplate
      #     builds:
      #       ephemeral:
      #         volumeClaimTemplate:
      #           spec:
      #             storageClassName: ceph-block # Use your default storage class
      #             accessModes: ["ReadWriteOnce"] # Standard access mode for block storage
      #             resources:
      #               requests:
      #                 storage: 10Gi # Request 10Gi for build data
      #     # Example: Mount ConfigMap as a volume
      #     # - name: my-configmap-volume
      #     #   configMap:
      #     #     name: my-configmap
      #     # Example: Mount Secret as a volume
      #     # - name: my-secret-volume
      #     #   secret:
      #     #     secretName: my-secret
      #   # -- Mount volumes into the build container.
      #   # build_mounts:
      #   # Example: Mount the ConfigMap volume into the build container
      #   # - name: my-configmap-volume
      #   #   mountPath: /path/to/configmap
      #   # Example: Mount the Secret volume into the build container
      #   # - name: my-secret-volume
      #   #   mountPath: /path/to/secret
      #   # -- Mount volumes into the helper container.
      #   # helper_mounts:
      #   # Example: Mount the ConfigMap volume into the helper container
      #   # - name: my-configmap-volume
      #   #   mountPath: /path/to/configmap
      #   # Example: Mount the Secret volume into the helper container
      #   # - name: my-secret-volume
      #   #   mountPath: /path/to/secret
