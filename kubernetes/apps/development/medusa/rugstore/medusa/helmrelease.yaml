# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2beta2.schema.json
---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: medusa
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.7.3 # Consider using the latest patch version if available
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  maxHistory: 2
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    controllers:
      medusa-server:
        # This controller runs the main Medusa backend server
        initContainers:
          migrate-db:
            image:
              # Use the ImagePolicy marker for automation later
              repository: ghcr.io/ekenheim/ecom/medusa
              tag: sha256:13b652aabb0f9f6d3383ac528cbe07335ab800b49b2d2088d8f858e6add55fa1
            env:
              # NODE_ENV should be production for deployed environments
              NODE_ENV: production
              DATABASE_TYPE: postgres
              DATABASE_URL:
                valueFrom:
                  secretKeyRef:
                    name: medusa-db-secret
                    key: DATABASE_URL
              REDIS_URL:
                valueFrom:
                  secretKeyRef:
                    name: medusa-db-secret
                    key: REDIS_URL
            command:
              # Changed from yarn medusa migrations run to yarn medusa db:migrate based on docs
              - sh
              - -c
              - yarn medusa db:migrate
            resources:
              requests:
                cpu: 100m
                memory: 128Mi
              limits:
                memory: 256Mi

        containers:
          main:
            image:
              # Use the ImagePolicy marker for automation later
              repository: ghcr.io/ekenheim/ecom/medusa
              tag: main # {"$imagepolicy": "development:medusa-main:tag"}
            env:
              # NODE_ENV should be production for deployed environments
              NODE_ENV: production
              PORT: "9000"
              DATABASE_TYPE: postgres
              DATABASE_URL:
                valueFrom:
                  secretKeyRef:
                    name: medusa-db-secret
                    key: DATABASE_URL
              REDIS_URL:
                valueFrom:
                  secretKeyRef:
                    name: medusa-db-secret
                    key: REDIS_URL
              JWT_SECRET:
                valueFrom:
                  secretKeyRef:
                    name: medusa-secret
                    key: JWT_SECRET
              COOKIE_SECRET:
                valueFrom:
                  secretKeyRef:
                    name: medusa-secret
                    key: COOKIE_SECRET
              STORE_CORS:
                valueFrom:
                  secretKeyRef:
                    name: medusa-secret
                    key: STORE_CORS
              ADMIN_CORS:
                valueFrom:
                  secretKeyRef:
                    name: medusa-secret
                    key: ADMIN_CORS
              # Add other necessary env vars from secrets/configmaps (e.g., Minio, Meilisearch)
            command: # Use the command defined in the Dockerfile CMD
              - yarn
              - start
            resources:
              requests:
                cpu: 100m # Adjust based on performance monitoring
                memory: 256Mi # Adjust based on performance monitoring
              limits:
                memory: 512Mi # Adjust based on performance monitoring
        pod:
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
            fsGroup: 1000
            fsGroupChangePolicy: "OnRootMismatch"

      medusa-worker:
        # Disable the worker controller for now
        enabled: false
        # containers:
        #   main:
        #     image:
        #       repository: ghcr.io/ekenheim/ecom/medusa
        #       tag: main # {"$imagepolicy": "development:medusa-main:tag"}
        #     env:
        #       NODE_ENV: production
        #       DATABASE_TYPE: postgres
        #       DATABASE_URL:
        #         valueFrom:
        #           secretKeyRef:
        #             name: medusa-db-secret
        #             key: DATABASE_URL
        #       REDIS_URL:
        #         valueFrom:
        #           secretKeyRef:
        #             name: medusa-db-secret
        #             key: REDIS_URL
        #     # IMPORTANT: Find the correct command for the worker in package.json
        #     # command:
        #     #  - yarn
        #     #  - start:worker # Example, replace with actual command
        #     resources:
        #       requests:
        #         cpu: 100m
        #         memory: 128Mi
        #       limits:
        #         memory: 256Mi
        # pod:
        #   securityContext:
        #     runAsUser: 1000
        #     runAsGroup: 1000
        #     fsGroup: 1000
        #     fsGroupChangePolicy: "OnRootMismatch"

    service:
      medusa-server:
        controller: medusa-server # Ensure this matches the enabled controller name
        type: ClusterIP
        ports:
          http:
            port: 9000
            protocol: HTTP

    ingress:
      main:
        enabled: false # Keep disabled for now unless external access needed
        # className: nginx
        # annotations:
        #   external-dns.alpha.kubernetes.io/target: ingress.${SECRET_DOMAIN}
        #   hajimari.io/icon: mdi:shopping
        # hosts:
        #   - host: &host "medusa.${SECRET_DOMAIN}"
        #     paths:
        #       - path: /
        #         pathType: Prefix
        #         service:
        #           identifier: medusa-server # Matches the service key
        #           port: http
        # tls:
        #   - hosts:
        #       - *host

    # persistence:
    #   data:
    #     # Only enable if Medusa is configured for local file storage
    #     # and you aren't using Minio/S3
    #     enabled: false
    #     # type: persistentVolumeClaim
    #     # accessMode: ReadWriteOnce
    #     # size: 10Gi
    #     # globalMounts:
    #     #   - path: /app/data